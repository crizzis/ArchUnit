dependencies {
    compile project(path: ':archunit', configuration: 'shadow')
    compile dependency.guava
    compile dependency.junit
    compile dependency.slf4j

    testCompile dependency.log4j_api
    testCompile dependency.log4j_core
    testCompile dependency.log4j_slf4j
    testCompile dependency.mockito
    testCompile dependency.assertj
    testCompile(dependency.assertj_guava) {
        exclude module: 'assertj-core'
        exclude module: 'guava'
    }
    testCompile project(path: ':archunit', configuration: 'tests')
}

test {
    if (!project.hasProperty('allTests')) {
        useJUnit {
            excludeCategories 'com.tngtech.archunit.Slow'
        }
    }
}

shadowJar {
    dependencies {
        exclude(project(':archunit'))
        exclude(dependency(dependency.slf4j))
        exclude(dependency(dependency.junit))
        exclude(dependency(dependency.hamcrest)) // Shadow doesn't respect transitive excludes :-(
    }
}

def proguardArchivePath

shrinkDependencies {
    // NOTE: proguard will warn a lot about library classes depending on program classes due to the double
    //       repackaged third party libs. We filter those duplicated classes in the next step.
    dontwarn
    dontnote

    proguardArchivePath = new File(jar.archivePath.parent, jar.archiveName.replace('.jar', '-proguard.jar'))
    outjars proguardArchivePath
}

task removeDuplicateThirdParty(type: Jar, dependsOn: shrinkDependencies) {
    from zipTree(proguardArchivePath)
    archiveName jar.archivePath.name
}
removeDuplicateThirdParty.doFirst {
    List repackagedFilesInArchUnit = zipTree(project(':archunit').jar.archivePath).filter {
        it.absolutePath.contains('com/tngtech/archunit/thirdparty')
    }.collect {
        it.absolutePath.replaceAll('.*com/tngtech/archunit/thirdparty', '**')
    }

    exclude repackagedFilesInArchUnit
}
assemble.dependsOn removeDuplicateThirdParty

def configureDependenciesAfterShadow = { pom ->
    pom.dependencies.removeAll {
        it.scope != 'compile' || !(it.artifactId in ['archunit', 'junit'])
    }
    pom.dependencies.find { it.artifactId == 'archunit' }.classifier = null
}
install.repositories.mavenInstaller.pom.whenConfigured configureDependenciesAfterShadow
uploadArchives.repositories.mavenDeployer.pom.whenConfigured configureDependenciesAfterShadow