ext.moduleName = 'com.tngtech.archunit.junit5.engine'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {
    compile project(path: ':archunit')
    compile project(path: ':archunit-junit')
    compile project(path: ':archunit-junit', configuration: 'api')
    compile project(path: ':archunit-junit5-api')
    compile project(path: ':archunit-junit5-engine-api')
    compile dependency.guava
    compile dependency.slf4j

    testCompile project(path: ':archunit', configuration: 'tests')
    testCompile dependency.assertj
    testCompile dependency.mockito
    testCompile dependency.junit5JupiterApi

    testRuntime dependency.junit5JupiterEngine
}

compileJava.dependsOn project(':archunit-junit5-api').finishArchive
compileJava.dependsOn project(':archunit-junit5-engine-api').finishArchive

configureSlowTestsFor this

test {
    useJUnitPlatform() {
        excludeEngines 'junit-archunit'
    }
}

shadowJar {
    exclude 'META-INF/maven/**'

    dependencies {
        exclude(project(':archunit'))
        exclude(dependency { it.name != dependency.guava && !it.name.contains('archunit-junit') })
    }
}

def configureDependencies = { pom ->
    pom.dependencies.removeAll {
        it.scope != 'compile' || !(it.artifactId in ['archunit', 'archunit-junit5-api', 'archunit-junit5-engine-api'])
    }
    pom.dependencies.find { it.artifactId == 'archunit' }.classifier = null
}
this.with project(':archunit-junit').configureJUnitArchive(configureDependencies)
