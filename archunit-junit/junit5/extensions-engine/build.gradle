plugins {
    id 'archunit.java-release-conventions'
}

repositories {
    flatDir {
        dirs "${rootDir}/inlineDeps/"
    }
}

ext.minimumJavaVersion = JavaVersion.VERSION_1_8

ext.moduleName = 'com.tngtech.archunit.junit5.extensionsengine'

dependencies {
    api project(path: ':archunit')
    api project(path: ':archunit-junit5-api')
    api project(path: ':archunit-junit5-engine')
    api project(path: ':archunit-junit5-extensions-api')
    implementation project(path: ':archunit-junit')
    dependency.addGuava { dependencyNotation, config -> implementation(dependencyNotation, config) }
    implementation dependency.slf4j
}

javadoc {
    source(project(':archunit-junit').sourceSets.main.allJava)
}
sourcesJar {
    from project(':archunit-junit').sourceSets.main.allSource
}

shadowJar {
    exclude 'META-INF/maven/**'

    dependencies {
        exclude(dependency {
            def isApi = it.configuration == 'archJunitApi'
            def isUnwantedDependency = it.name != dependency.guava && it.moduleName != 'archunit-junit'
            isUnwantedDependency || isApi
        })
    }
}

def configureDependencies = { deps ->
    deps.children().removeIf { dep ->
        dep.scope.text() != 'compile' || !(dep.artifactId.text() in ['archunit'])
    }
}
this.with project(':archunit-junit').configureJUnitArchive(configureDependencies)


