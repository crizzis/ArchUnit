String archUnitLicenseFile = 'licenses/archunit.license'
String guavaLicenseFile = 'licenses/guava.license'
String asmLicenseFile = 'licenses/asm.license'

def scriptRoot = currentScriptRootOf this
def fillTemplateFile = {
    new File(scriptRoot, it).text.
            replace('${year}', year).
            replace('${owner}', "${company.name}")
}

def parentPomOf = { String dep ->
    dep.replaceAll(/(.*:)(.*)(:.*)/, /$1$2-parent$3@pom/)
}

configurations {
    thirdpartyAsm
    thirdpartyGuava
}

dependencies {
    thirdpartyAsm parentPomOf(dependency.asm)
    thirdpartyGuava parentPomOf(dependency.guava)
}

def parseLicenseInfoFrom = { config ->
    def pom = config.resolve().find { it.name.endsWith('.pom') }

    def projectNode = new XmlParser().parse(pom)
    def licenses = projectNode.licenses.license
    assert licenses.size() == 1: 'Can only handle one declared license at the moment'

    def name = licenses.name*.text().find()
    def address = licenses.url*.text().find()

    assert name: "Couldn't retrieve name of license from ${pom} (checked project>licenses>license>name)"
    assert address: "Couldn't retrieve URl of license from ${pom} (checked project>licenses>license>url)"

    [
            name: name,
            url : new URL(address)
    ]
}

def createLicense = { licenseInfo, preProcessLicenseText = null ->
    def text = licenseInfo.url.text
    if (preProcessLicenseText) {
        text = preProcessLicenseText(text)
    }

    def sourceName = "Name: ${licenseInfo.name}"
    def sourceUrl = "Url : ${licenseInfo.url}"

    """${sourceName}
${sourceUrl}

${('-' * Math.max(sourceName.length(), sourceUrl.length()))}

${text}
"""
}

// Pretty dirty, but I couldn't find an official plain text version online
def unwrapHtml = { htmlInput ->
    def html = htmlInput
    while (!html.startsWith('Copyright (c)') && html.contains('<pre>')) {
        html = html.substring(html.indexOf('<pre>') + 5, html.length()).trim()
    }

    assert html.startsWith('Copyright (c)'):
            "Couldn't find license tag (looked for <pre>Copyright (c)...</pre> within ${html})"

    html.substring(0, html.indexOf('</pre>'))
}

task updateLicenses {
    doLast {
        rootProject.file(archUnitLicenseFile).text = fillTemplateFile('archunit.license.template')
        rootProject.file('LICENSE.txt').text = rootProject.file(archUnitLicenseFile).text // so Github can understand it

        rootProject.file(asmLicenseFile).text = createLicense(parseLicenseInfoFrom(configurations.thirdpartyAsm), unwrapHtml)

        rootProject.file(guavaLicenseFile).text = createLicense(parseLicenseInfoFrom(configurations.thirdpartyGuava))
    }
}

project(':archunit') {
    ext.repackagesAsm = true
}

productionProjects*.with {
    def installer = install.repositories.mavenInstaller
    def deployer = uploadArchives.repositories.mavenDeployer

    [installer, deployer]*.pom*.whenConfigured {
        project {
            licenses {
                license {
                    name app.license.name
                    url app.license.url
                    distribution 'repo'
                }
                if (repackagesAsm) {
                    def asmLicense = rootProject.file(asmLicenseFile).readLines() as Queue
                    license {
                        name asmLicense.poll().replaceAll(/^.*?: /, '')
                        url asmLicense.poll().replaceAll(/^.*?: /, '')
                        distribution 'repo'
                    }
                }
            }
        }
    }

    if (repackagesAsm) {
        shadowJar {
            from(rootProject.file(asmLicenseFile)) {
                into "/${asmRelocationPackage.replace('.', '/')}"
            }
        }
        shadowJar.mustRunAfter updateLicenses
    }

    task addLicenseHeader {
        doLast {
            def headerText = fillTemplateFile('archunit.header.template')

            sourceSets.main.allJava.each { sourceFile ->
                if (!sourceFile.text.startsWith(headerText)) {
                    sourceFile.text = headerText + sourceFile.text.substring(sourceFile.text.indexOf('package '))
                }
            }
        }
    }
    compileJava.dependsOn addLicenseHeader
}