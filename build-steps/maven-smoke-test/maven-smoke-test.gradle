import java.nio.file.Files

def repositoryUrls = [
        tng     : [
                snapshots: 'https://nexus.int.tngtech.com/content/repositories/snapshots',
                releases : 'https://nexus.int.tngtech.com/content/repositories/releases'
        ],
        sonatype: [
                snapshots: 'https://oss.sonatype.org/content/repositories/snapshots',
                releases : 'https://oss.sonatype.org/content/repositories/releases'
        ]
]
def createRepositoriesTag = { repoUrls ->
    """
    <repositories>
        <repository>
            <id>snapshots</id>
            <name>Snapshots</name>
            <url>${repoUrls.snapshots}</url>
        </repository>
        <repository>
            <id>releases</id>
            <name>Releases</name>
            <url>${repoUrls.releases}</url>
        </repository>
    </repositories>
"""
}

def getRepoUrls = {
    def repoUrls = repositoryUrls.get(it)
    assert repoUrls: "The configured -PmavenRepos=${it} don't exist"
    repoUrls
}

def mavenSrc = new File(rootProject.file('archunit-maven-test'), 'src')
def verificationTestPath = new File(rootProject.file('archunit-maven-test'), 'verification/TestResultTest.java')
task prepareMavenTest {
    doLast {
        def pom = rootProject.file('archunit-maven-test/pom.xml')
        def pomBak = rootProject.file('archunit-maven-test/pom.xml.bak')
        pomBak.delete()
        Files.copy(pom.toPath(), pomBak.toPath())

        def repositories = project.hasProperty('mavenRepos') ?
                createRepositoriesTag(getRepoUrls(project.getProperty('mavenRepos'))) :
                ''

        pom.text = pom.text.
                replace('#{archunit.version}', "${version}").
                replace('#{repositories}', repositories)

        copy {
            from new File(project(':archunit-example').projectDir, 'src')
            into mavenSrc
        }
        copy {
            from verificationTestPath
            into new File(mavenSrc, 'test/java')
        }
    }
}

task executeRules(type: Exec, dependsOn: prepareMavenTest) {
    workingDir "$rootProject.projectDir/archunit-maven-test"

    commandLine 'mvn', 'clean', 'test', '-P', 'execute-rules'
}

task verifyRules(type: Exec, dependsOn: executeRules) {
    workingDir "$rootProject.projectDir/archunit-maven-test"

    commandLine 'mvn', 'surefire:test', '-P', 'verify-rules'
}

task cleanUpMavenTest {
    doLast {
        def pom = rootProject.file('archunit-maven-test/pom.xml')
        def pomBak = rootProject.file('archunit-maven-test/pom.xml.bak')
        pom.delete()
        Files.copy(pomBak.toPath(), pom.toPath())
        pomBak.delete()
        mavenSrc.deleteDir()
    }
}

// Run cleanUp even if task fails
verifyRules.finalizedBy cleanUpMavenTest
executeRules.finalizedBy cleanUpMavenTest

task runMavenTest(dependsOn: [prepareMavenTest, executeRules, verifyRules, cleanUpMavenTest])

productionProjects.with {
    executeRules.mustRunAfter install
    executeRules.mustRunAfter uploadArchives
}