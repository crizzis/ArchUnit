import java.nio.file.Files
import java.time.LocalDateTime
import java.util.jar.JarFile
import java.util.jar.Manifest

apply from: scriptRelativePath(this, 'vcs-utils.gradle')
apply from: scriptRelativePath(this, 'archunit-examples-utils.gradle')

File scriptRoot = currentScriptRootOf this

ext {
    tngRepoId = project.findProperty('tngRepoId')
}

def rootUrl = {
    "https://oss.sonatype.org/service/local/repositories/${tngRepoId}/content/com/tngtech/archunit"
}

def createArtifactUrl = { String artifactId ->
    "${rootUrl()}/${artifactId}/${version}/${artifactId}-${version}"
}

def getUploadedFile = { String artifactId, String ending, String suffix ->
    def fullEnding = (!suffix.isEmpty() ? "-${suffix}" : '') + ".${ending}"
    def tempDir = Files.createTempDirectory('release-check').toFile()
    File result = new File(tempDir, "${artifactId}${fullEnding}")
    result.bytes = new URL("${createArtifactUrl(artifactId)}${fullEnding}").bytes
    result
}

def getUploadedFileText = { String artifactId, String ending ->
    new URL("${createArtifactUrl(artifactId)}.${ending}").text.stripIndent()
}

def getExpectedFile = { String artifactId, String ending ->
    new File(scriptRoot, "expected/${artifactId}.${ending}").text.replace('${archunit.version}', version).stripIndent()
}

def checkPom = { String artifactId ->
    println "Verifying correct POM of ${artifactId}"

    String actual = getUploadedFileText(artifactId, 'pom')
    String expected = getExpectedFile(artifactId, 'pom')
    if (actual.replaceAll("\\s", "") != expected.replaceAll("\\s", "")) {
        throw new AssertionError("""POM of artifact '${artifactId}' does not match:
--------
Actual: 
${actual}
--------
Expected:
${expected}
--------
""")
    }
}

def checkManifest = { String artifactId, Manifest manifest ->
    println "Verifying correct Manifest of ${artifactId}"

    def checkAttributes = { expected ->
        expected.each { key, value ->
            assert manifest.mainAttributes.getValue(key) == value
        }
    }
    checkAttributes([
            'Specification-Title'   : "ArchUnit - Module '${artifactId}'",
            'Specification-Version' : version,
            'Specification-Vendor'  : 'TNG Technology Consulting GmbH',
            'Implementation-Title'  : "com.tngtech.${artifactId.replace('-', '.')}",
            'Implementation-Version': version,
            'Implementation-Vendor' : 'TNG Technology Consulting GmbH',
            'Issue-Tracker'         : 'https://github.com/TNG/ArchUnit/issues',
            'Documentation-URL'     : 'https://github.com/TNG/ArchUnit',
            'Copyright'             : "${LocalDateTime.now().year} TNG Technology Consulting GmbH",
            'License'               : 'The Apache Software License, Version 2.0',
            'Automatic-Module-Name' : "com.tngtech.${artifactId.replaceFirst('-', '.').replaceFirst('-', '.').replace('-', '')}"
    ])
}

def checkThirdParty = { JarFile jarFile ->
    assert jarFile.getEntry('com/tngtech/archunit/thirdparty/org/objectweb/asm/ClassVisitor.class') != null: 'ASM is missing from 3rd party'
    assert jarFile.getEntry('com/tngtech/archunit/thirdparty/org/objectweb/asm/asm.license') != null: 'ASM license is missing from 3rd party'
    assert jarFile.getEntry('com/tngtech/archunit/thirdparty/com/google/common/collect/ImmutableSet.class') != null: 'Guava is missing from 3rd party'
}

def checkNoThirdParty = { JarFile jarFile ->
    assert jarFile.getEntry('com/tngtech/archunit/thirdparty') == null: 'There exists a third party folder'
}

def checkNoIllegalJarEntries = { JarFile jarFile ->
    def illegalEntries = Collections.list(jarFile.entries()).findAll {
        !it.name.startsWith('com/tngtech/archunit/') &&
                it.name != 'com/' &&
                it.name != 'com/tngtech/' &&
                !it.name.startsWith('META-INF/')
    }
    assert illegalEntries.empty: """
        |There are invalid entries contained inside of release artifact ${new File(jarFile.name).name}: 
        |-> ${illegalEntries.join("${System.lineSeparator()}-> ")}""".stripMargin().trim()
}

def checkSourcesExist = { String artifactId ->
    assert getUploadedFile(artifactId, 'jar', 'sources') != null
}

def checkJavadocExists = { String artifactId ->
    assert getUploadedFile(artifactId, 'jar', 'javadoc') != null
}

def checkArtifactContent = { Project project, JarFile jarFile ->
    checkManifest(project.name, jarFile.manifest)
    if (project.repackagesAsm) {
        println "Artifact ${project.name} is configured to repackage 3rd party libs -> checking existence of 3rd party package..."
        checkThirdParty(jarFile)
    } else {
        println "Artifact ${project.name} is configured to not repackage 3rd party libs -> checking absense of 3rd party package..."
        checkNoThirdParty(jarFile)
    }
    checkNoIllegalJarEntries(jarFile)
}

task checkUploadedArtifacts {
    doFirst {
        tngRepoId = tngRepoId ?: closeSonatypeStagingRepository.stagingRepositoryId.get()
    }

    doLast {
        releaseProjects.each { Project project ->
            checkPom(project.name)
            checkSourcesExist(project.name)
            checkJavadocExists(project.name)

            JarFile jarFile = new JarFile(getUploadedFile(project.name, 'jar', ''))
            checkArtifactContent(project, jarFile)
        }
    }
}
closeSonatypeStagingRepository.finalizedBy(checkUploadedArtifacts)

releaseProjects.each { Project project ->
    def task = project.task(['dependsOn': project.build], 'checkArtifact') {
        doLast {
            def jarFile = new JarFile(project.jar.archiveFile.get().getAsFile())
            checkArtifactContent(project, jarFile)
        }
    }
    project.build.finalizedBy(task)
}

task testRelease() {
    File testReleaseDir = new File(project.buildDir, 'test-release')

    def configureStagingRepository = {
        new File(testReleaseDir, 'build.gradle').with {
            text = text.replace('mavenCentral()', '''
            mavenCentral()
            maven {
                url "https://oss.sonatype.org/content/repositories/staging/"
                credentials {
                    username project.getProperty('sonatypeUsername')
                    password project.getProperty('sonatypePassword')
                }
            }''')
        }
    }

    def testExampleProject = { String exampleProjectName ->
        List<String> testClassNames = fileTree(new File(testReleaseDir, exampleProjectName)) {
            include '**/*Test.java'
        }.getFiles().collect { it.name.replaceAll(/\.java$/, '') }

        def outputStream = new ByteArrayOutputStream()
        exec {
            workingDir testReleaseDir
            commandLine './gradlew', ":${exampleProjectName}:build"
            ignoreExitValue true
            standardOutput = outputStream
        }
        String output = outputStream.toString()

        assert output.contains("Task :${exampleProjectName}:test FAILED"): "The test task should have failed"
        assert output.contains('java.lang.AssertionError'): "There should be AssertionErrors"
        testClassNames.each { testClassName ->
            assert output.contains(testClassName): "The failure output should contain the test class '${testClassName}'"
        }
    }

    doFirst {
        gitCheckOut(archunitExamplesGitRepo, testReleaseDir)

        updateArchUnitExampleVersion(testReleaseDir)

        configureStagingRepository()

        testExampleProject('example-plain')
        testExampleProject('example-junit4')
        testExampleProject('example-junit5')
    }
}
closeSonatypeStagingRepository.finalizedBy(testRelease)
