ext.isReleaseVersion = !project.version.endsWith("-SNAPSHOT")

apply plugin: "io.github.gradle-nexus.publish-plugin"

nexusPublishing {
    packageGroup = 'com.tngtech'
    repositories {
        sonatype {
            username = findProperty("sonatypeUsername")
            password = findProperty("sonatypePassword")
        }
    }
}

releaseProjects*.with {
    apply plugin: "maven-publish"
    apply plugin: "signing"

    tasks.withType(GenerateModuleMetadata) {
        enabled = false // the meta-data does not match the way the Maven artifacts are composed and thus is broken
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    // If I write @see ..., I don't want to fail my build because of a missing @param :-(
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    tasks.withType(AbstractPublishToMaven) {
        it.dependsOn(build)
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = project.archivesBaseName
                from components.java
                pom {
                    name = app.name
                    packaging = "jar"
                    description = project.description
                    url = app.urls.entry

                    developers {
                        developer {
                            id = 'codecholeric'
                            name = 'Peter Gafert'
                            email = 'peter.gafert@tngtech.com'
                        }
                        developer {
                            id = 'rweisleder'
                            name = 'Roland Weisleder'
                            email = 'roland.weisleder@googlemail.com'
                        }
                        developer {
                            id = 'hankem'
                            name = 'Manfred Hanke'
                            email = 'manfred.hanke@tngtech.com'
                        }
                    }

                    organization {
                        name = company.name
                        url = company.url
                    }

                    scm {
                        url = app.urls.source
                        connection = "scm:${app.gitRepo}"
                        developerConnection = "scm:${app.gitRepo}"
                    }
                }
            }
        }
    }

    signing {
        required {
            isReleaseVersion && gradle.taskGraph.hasTask('publish')
        }
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }
}

task publishArchUnit(dependsOn: [closeSonatypeStagingRepository, releaseSonatypeStagingRepository])
releaseProjects.each { publishArchUnit.dependsOn("${it.name}:publishToSonatype") }

def getLastReleaseVersion() {
    (new File(project.rootDir, 'README.md').text =~ /testImplementation 'com.tngtech.archunit:archunit:(\d+.\d+.\d+)'/).findAll().first()[1]
}

def gradleProperties = new File(project.rootDir, 'gradle.properties')

def getCurrentVersion = {
    (gradleProperties.text =~ /archunit\.version=(.*)/).findAll().first()[1]
}

def withCurrentVersion = { Closure<?> doWithCurrentVersion ->
    List<String> versionParts = (getCurrentVersion() =~ /^(\d+)\.(\d+)\.(\d+)(.*)$/).findAll().first().tail()
    assert versionParts.size() == 4: "Could not parse major.minor.patch(-suffix)? from supplied version string '$version'"

    int majorVersion = Integer.parseInt(versionParts[0])
    int minorVersion = Integer.parseInt(versionParts[1])
    int patchVersion = Integer.parseInt(versionParts[2])
    String suffix = versionParts[3]
    return doWithCurrentVersion(majorVersion, minorVersion, patchVersion, suffix)
}

def updateVersion = { Closure<String> calculateNewVersion ->
    def newVersion = withCurrentVersion(calculateNewVersion)
    println "Setting ArchUnit version to ${newVersion}"
    gradleProperties.text = gradleProperties.text.replaceAll(/archunit\.version=.*/, "archunit.version=${newVersion}")
    rootProject.allprojects { it.version = newVersion }
}

def executeCommand = { String command ->
    new StringBuilder().with { output ->
        def error = new StringBuilder()
        def exitCode = command.split(' ').execute()
            .with {
                it.consumeProcessOutputStream(output)
                it.consumeProcessErrorStream(error)
                it
            }.waitFor()
        assert exitCode == 0: "Command '$command' failed with exit code $exitCode: $error"
        output.toString().trim()
    }
}

task prepareRelease() {
    doFirst {
        String releaseVersion = withCurrentVersion { int oldMajor, int oldMinor, int oldPatch, String oldSuffix -> "$oldMajor.$oldMinor.$oldPatch" }

        def releaseBranch = "release-$releaseVersion"
        executeCommand("git checkout -b $releaseBranch")
        String currentBranch = executeCommand('git rev-parse --abbrev-ref HEAD')
        assert currentBranch == releaseBranch: "Mismatch: Should be on branch $releaseBranch but current branch is $currentBranch"

        updateVersion { major, minor, patch, suffix -> releaseVersion }

        String lastReleaseVersion = getLastReleaseVersion()
        ['README.md', 'docs/_data/navigation.yml', 'docs/_pages/getting-started.md'].each {
            new File(project.rootDir, it).with { file ->
                println "Replacing last release version $lastReleaseVersion by $releaseVersion in file ${file.absolutePath}"
                file.text = file.text.replaceAll(lastReleaseVersion, releaseVersion)
            }
        }
    }
}
prepareRelease.finalizedBy(':docs:renderUserGuide')

task setNextSnapshotVersion() {
    doFirst {
        updateVersion { int oldMajor, int oldMinor, int oldPatch, String oldSuffix -> "$oldMajor.${oldMinor + 1}.0-SNAPSHOT" }
    }
}
