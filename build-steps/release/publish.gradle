apply from: scriptRelativePath(this, 'vcs-utils.gradle')
apply from: scriptRelativePath(this, 'archunit-examples-utils.gradle')

ext.isReleaseVersion = !project.version.endsWith("-SNAPSHOT")

if (!hasProperty("sonatypeUsername")) {
    ext.sonatypeUsername = ""
}
if (!hasProperty("sonatypePassword")) {
    ext.sonatypePassword = ""
}

releaseProjects*.with {
    apply plugin: "maven-publish"
    apply plugin: "signing"
    apply plugin: "de.marcphilipp.nexus-publish"

    tasks.withType(GenerateModuleMetadata) {
        enabled = false // the meta-data does not match the way the Maven artifacts are composed and thus is broken
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    // If I write @see ..., I don't want to fail my build because of a missing @param :-(
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    tasks.withType(AbstractPublishToMaven) {
        it.dependsOn(build)
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = project.archivesBaseName
                from components.java
                pom {
                    name = app.name
                    packaging = "jar"
                    description = project.description
                    url = app.urls.entry

                    developers {
                        developer {
                            id = 'codecholeric'
                            name = 'Peter Gafert'
                            email = 'peter.gafert@tngtech.com'
                        }
                        developer {
                            id = 'rweisleder'
                            name = 'Roland Weisleder'
                            email = 'roland.weisleder@googlemail.com'
                        }
                        developer {
                            id = 'hankem'
                            name = 'Manfred Hanke'
                            email = 'manfred.hanke@tngtech.com'
                        }
                    }

                    organization {
                        name = company.name
                        url = company.url
                    }

                    scm {
                        url = app.urls.source
                        connection = "scm:${app.gitRepo}"
                        developerConnection = "scm:${app.gitRepo}"
                    }
                }
            }
        }

        // respective username and password can be configured in ~/.gradle/gradle.properties
        if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
            nexusPublishing {
                repositories {
                    sonatype()
                }
            }
        }
    }

    signing {
        // requires gradle.properties, see http://www.gradle.org/docs/current/userguide/signing_plugin.html
        required {
            isReleaseVersion && gradle.taskGraph.hasTask('publish') && project.hasProperty('sonatypeUsername')
        }
        sign publishing.publications.mavenJava
    }
}

task testRelease() {
    File testReleaseDir = new File(project.buildDir, 'test-release')

    def configureStagingRepository = {
        new File(testReleaseDir, 'build.gradle').with {
            text = text.replace('mavenCentral()', '''
            mavenCentral()
            maven {
                url "https://oss.sonatype.org/content/repositories/staging/"
                credentials {
                    username project.getProperty('sonatypeUsername')
                    password project.getProperty('sonatypePassword')
                }
            }''')
        }
    }

    def testExampleProject = { String exampleProjectName ->
        List<String> testClassNames = fileTree(new File(testReleaseDir, exampleProjectName)) {
            include '**/*Test.java'
        }.getFiles().collect { it.name.replaceAll(/\.java$/, '') }

        def outputStream = new ByteArrayOutputStream()
        exec {
            workingDir testReleaseDir
            commandLine './gradlew', ":${exampleProjectName}:build"
            ignoreExitValue true
            standardOutput = outputStream
        }
        String output = outputStream.toString()

        assert output.contains("Task :${exampleProjectName}:test FAILED"): "The test task should have failed"
        assert output.contains('java.lang.AssertionError'): "There should be AssertionErrors"
        testClassNames.each { testClassName ->
            assert output.contains(testClassName): "The failure output should contain the test class '${testClassName}'"
        }
    }

    doFirst {
        gitCheckOut(archunitExamplesGitRepo, testReleaseDir)

        updateArchUnitExampleVersion(testReleaseDir)

        configureStagingRepository()

        testExampleProject('example-plain')
        testExampleProject('example-junit4')
        testExampleProject('example-junit5')
    }
}
