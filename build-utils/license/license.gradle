String archUnitLicenseFile = 'licenses/archunit.license'
String guavaLicenseFile = 'licenses/guava.license'
String asmLicenseFile = 'licenses/asm.license'

def addonFile = { rootProject.file("build-utils/license/${it}") }

def fillTemplateFile = {
    addonFile(it).text.
            replace('${year}', year).
            replace('${owner}', "${company.name}")
}

def parentPomOf = { String dep ->
    dep.replaceAll(/(.*:)(.*)(:.*)/, /$1$2-parent$3@pom/)
}

configurations {
    thirdpartyAsm
    thirdpartyGuava
}

dependencies {
    thirdpartyAsm parentPomOf(dependency.asm)
    thirdpartyGuava parentPomOf(dependency.guava)
}

def parseLicenseUrlFrom = { config ->
    def pom = config.resolve().find { it.name.endsWith('.pom') }

    def projectNode = new XmlParser().parse(pom)
    def address = projectNode.licenses.license.url*.text().find()

    assert address: "Couldn't retrieve URl of license from ${pom} (checked project>licenses>license>url)"

    new URL(address)
}

def createLicense = { url, preProcessClosure = null ->
    def text = url.text
    if (preProcessClosure) {
        text = preProcessClosure(text)
    }

    def sourceHeader = "Source: ${url}"

    """${sourceHeader}

${'-'.multiply(sourceHeader.length())}

${text}
"""
}

// Pretty dirty, but I couldn't find an official plain text version online
def unwrapHtml = { htmlInput ->
    def html = htmlInput
    while (!html.startsWith('Copyright (c)') && html.contains('<pre>')) {
        html = html.substring(html.indexOf('<pre>') + 5, html.length()).trim()
    }

    assert html.startsWith('Copyright (c)'):
            "Couldn't find license tag (looked for <pre>Copyright (c)...</pre> within ${html})"

    html.substring(0, html.indexOf('</pre>'))
}

task updateLicenses {
    doLast {
        rootProject.file(archUnitLicenseFile).text = fillTemplateFile('archunit.license.template')

        rootProject.file(asmLicenseFile).text = createLicense(parseLicenseUrlFrom(configurations.thirdpartyAsm), unwrapHtml)

        rootProject.file(guavaLicenseFile).text = createLicense(parseLicenseUrlFrom(configurations.thirdpartyGuava))
    }
}

def configure3rdPartyLicenses = {
    File jarPath = shrinkDependencies.archivePath
    File jarTempPath = tempJar(jarPath)

    task add3rdPartyLicenses(type: Zip, dependsOn: shrinkDependencies) {
        onlyIf {
            zipTree(jarPath).find { it.absolutePath.contains('thirdparty/org/objectweb/asm') }
        }

        from {
            zipTree(jarPath)
        }
        from(rootProject.file(asmLicenseFile)) {
            into "/${asmRelocationPackage.replace('.', '/')}"
        }

        destinationDir jarTempPath.parentFile
        archiveName jarTempPath.name

        doLast {
            assert jarPath.delete()
            assert jarTempPath.renameTo(jarPath)
        }

        mustRunAfter updateLicenses
        finalizedBy finishArchive
    }

    assemble.dependsOn add3rdPartyLicenses
}

productionProjects*.with {
    def installer = install.repositories.mavenInstaller
    def deployer = uploadArchives.repositories.mavenDeployer

    [installer, deployer]*.pom {
        project {
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            organization {
                name "${company.name}"
                url "${company.url}"
            }
        }
    }

    task addLicenseHeader {
        doLast {
            def headerText = fillTemplateFile('archunit.header.template')

            sourceSets.main.allJava.each { sourceFile ->
                if (!sourceFile.text.startsWith(headerText)) {
                    sourceFile.text = headerText + sourceFile.text.substring(sourceFile.text.indexOf('package '))
                }
            }
        }
    }
    assemble.dependsOn addLicenseHeader

    it.with configure3rdPartyLicenses
}