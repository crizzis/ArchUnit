buildscript {
    repositories {
        mavenCentral();
    }

    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.3.1'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.4'
}

ext.dependency = [
        asm               : 'org.ow2.asm:asm:5.1',
        guava             : 'com.google.guava:guava:19.0',
        slf4j             : 'org.slf4j:slf4j-api:1.7.7',
        log4j_api         : 'org.apache.logging.log4j:log4j-api:2.1',
        log4j_core        : 'org.apache.logging.log4j:log4j-core:2.1',
        log4j_slf4j       : 'org.apache.logging.log4j:log4j-slf4j-impl:2.1',

        junit             : 'junit:junit:4.12',
        hamcrest          : 'org.hamcrest:hamcrest-core:1.3',
        junit_dataprovider: 'com.tngtech.java:junit-dataprovider:1.10.0',
        mockito           : 'org.mockito:mockito-core:1.10.19',
        assertj           : 'org.assertj:assertj-core:2.4.1',
        assertj_guava     : 'org.assertj:assertj-guava:2.0.0'
]

task wrapper(type: Wrapper) {
    gradleVersion = '3.2'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'

    group = 'com.tngtech.archunit'
    version = '0.3.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    install.dependsOn(build)
    uploadArchives.dependsOn(build)
}

def configureFindbugs = {
    apply plugin: 'findbugs'

    findbugs {
        sourceSets = [sourceSets.main]
        excludeFilter = file("$rootProject.projectDir/findbugs-excludes.xml")
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled false
            html.enabled true
        }
    }
}

def thirdPartyRelocationPackage = 'com.tngtech.archunit.thirdparty'
def asmRelocationPackage = "${thirdPartyRelocationPackage}.org.objectweb"
def guavaRelocationPackage = "${thirdPartyRelocationPackage}.com.google"

ext.shadowConfig = { classifierName ->
    return {
        classifier = classifierName

        exclude 'org/apache/**'
        exclude 'Log4j*'
        exclude 'META-INF/**'

        relocate 'org.objectweb', asmRelocationPackage
        relocate 'com.google', guavaRelocationPackage
    }
}

def configureShadow = {
    shadowJar shadowConfig('all')
}

def configureProguard = {
    configurations {
        proguard
    }

    dependencies {
        proguard 'com.google.code.findbugs:jsr305:3.0.1'
    }

    task shrinkDependencies(type: proguard.gradle.ProGuardTask, dependsOn: shadowJar) {
        injars shadowJar.archivePath

        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
        libraryjars configurations.compile
        libraryjars configurations.proguard

        dontoptimize
        dontobfuscate
        dontwarn '**.com.google.j2objc.annotations.**'
        dontwarn 'org.codehaus.**'
        dontwarn 'org.slf4j.impl.**'

        keep "class !${guavaRelocationPackage}.** {*;}"
        keepclassmembers "class ${guavaRelocationPackage}.** {*;}"
    }

    assemble.dependsOn(shrinkDependencies)
}

def configurePublish = {
    uploadArchives {
        repositories {
            mavenDeployer {
                // the following properties can be defined in ~/.gradle/gradle.properties:
                if (project.hasProperty('tngNexusUsername') && project.hasProperty('tngNexusPassword')) {
                    repository(url: 'https://nexus.int.tngtech.com/content/repositories/releases') {
                        authentication(userName: tngNexusUsername, password: tngNexusPassword)
                    }
                    snapshotRepository(url: 'https://nexus.int.tngtech.com/content/repositories/snapshots') {
                        authentication(userName: tngNexusUsername, password: tngNexusPassword)
                    }
                }
            }
        }
    }
}

[':archunit', ':archunit-junit'].each {
    project(it) {
        apply plugin: 'com.github.johnrengelman.shadow'
    }

    project(it, configureFindbugs)
    project(it, configureShadow)
    project(it, configureProguard)
    project(it, configurePublish)
}