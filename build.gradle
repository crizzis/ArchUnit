plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.4'
}

ext.dependency = [
        asm               : 'org.ow2.asm:asm:5.1',
        guava             : 'com.google.guava:guava:19.0',
        slf4j             : 'org.slf4j:slf4j-api:1.7.7',
        log4j_api         : 'org.apache.logging.log4j:log4j-api:2.1',
        log4j_core        : 'org.apache.logging.log4j:log4j-core:2.1',
        log4j_slf4j       : 'org.apache.logging.log4j:log4j-slf4j-impl:2.1',

        junit             : 'junit:junit:4.12',
        junit_dataprovider: 'com.tngtech.java:junit-dataprovider:1.10.0',
        mockito           : 'org.mockito:mockito-core:1.10.19',
        assertj           : 'org.assertj:assertj-core:2.4.1',
        assertj_guava     : 'org.assertj:assertj-guava:2.0.0'
]

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'com.github.johnrengelman.shadow'

    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'

    group = 'com.tngtech.archunit'
    version = '0.3.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    install.dependsOn(build)
    uploadArchives.dependsOn(build)
}

ext.shadowConfig = { classifierName ->
    return {
        classifier = classifierName

        exclude 'org/apache/**'
        exclude 'Log4j*'
        exclude 'META-INF/**'

        relocate 'org.objectweb', 'com.tngtech.archunit.internal.org.objectweb'
        relocate 'com.google', 'com.tngtech.archunit.internal.com.google'
    }
}

[':archunit', ':archunit-junit'].each {
    project(it) {
        apply plugin: 'findbugs'

        assemble.dependsOn(shadowJar)

        shadowJar shadowConfig('')

        uploadArchives {
            repositories {
                mavenDeployer {
                    // the following properties can be defined in ~/.gradle/gradle.properties:
                    if (project.hasProperty('tngNexusUsername') && project.hasProperty('tngNexusPassword')) {
                        repository(url: 'https://nexus.int.tngtech.com/content/repositories/releases') {
                            authentication(userName: tngNexusUsername, password: tngNexusPassword)
                        }
                        snapshotRepository(url: 'https://nexus.int.tngtech.com/content/repositories/snapshots') {
                            authentication(userName: tngNexusUsername, password: tngNexusPassword)
                        }
                    }
                }
            }
        }

        findbugs {
            sourceSets = [sourceSets.main]
            excludeFilter = file("$rootProject.projectDir/findbugs-excludes.xml")
        }

        tasks.withType(FindBugs) {
            reports {
                xml.enabled false
                html.enabled true
            }
        }
    }
}
