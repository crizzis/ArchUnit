import proguard.gradle.ProGuardTask

import java.nio.file.Files

import static java.nio.charset.StandardCharsets.UTF_8

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.3.3'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.4'
}

def thirdPartyRelocationPackage = 'com.tngtech.archunit.thirdparty'

ext {
    year = "${Calendar.getInstance().get(Calendar.YEAR)}"
    company = [
            name: 'TNG Technology Consulting GmbH',
            url : 'http://www.tngtech.com'
    ]
    asmRelocationPackage = "${thirdPartyRelocationPackage}.org.objectweb.asm"
    guavaRelocationPackage = "${thirdPartyRelocationPackage}.com.google"

    dependency = [
            asm               : 'org.ow2.asm:asm:5.1',
            guava             : 'com.google.guava:guava:19.0',
            slf4j             : 'org.slf4j:slf4j-api:1.7.7',
            log4j_api         : 'org.apache.logging.log4j:log4j-api:2.1',
            log4j_core        : 'org.apache.logging.log4j:log4j-core:2.1',
            log4j_slf4j       : 'org.apache.logging.log4j:log4j-slf4j-impl:2.1',

            junit             : 'junit:junit:4.12',
            hamcrest          : 'org.hamcrest:hamcrest-core:1.3',
            junit_dataprovider: 'com.tngtech.java:junit-dataprovider:1.10.0',
            mockito           : 'org.mockito:mockito-core:1.10.19',
            assertj           : 'org.assertj:assertj-core:2.4.1',
            assertj_guava     : 'org.assertj:assertj-guava:2.0.0'
    ]

    postfixedJar = { File jarFile, String postfix ->
        new File(jarFile.parentFile, jarFile.name.replaceAll(/\.jar$/, "-${postfix}.jar"))
    }

    tempJar = { File jarFile -> postfixedJar(jarFile, 'tmp') }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}

allprojects {
    group = 'com.tngtech.archunit'
    version = '0.4.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }
}

def productionProjectNames = ['archunit', 'archunit-junit']
ext.productionProjects = subprojects.findAll { productionProjectNames.contains(it.name) }

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'

    install.dependsOn(build)
    uploadArchives.dependsOn(build)
}

def configureFindbugs = {
    apply plugin: 'findbugs'

    findbugs {
        sourceSets = [sourceSets.main]
        excludeFilter = file("$rootProject.projectDir/findbugs-excludes.xml")
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled false
            html.enabled true
        }
    }
}

ext.shadowConfig = { classifierName ->
    return {
        classifier = classifierName

        exclude 'org/apache/**'
        exclude 'Log4j*'
        exclude 'META-INF/**'

        relocate 'org.objectweb.asm', asmRelocationPackage
        relocate 'com.google', guavaRelocationPackage
    }
}

def configureShadow = {
    shadowJar shadowConfig('shadow')
}

def configureProGuard = {
    configurations {
        proguard
    }

    dependencies {
        proguard 'com.google.code.findbugs:jsr305:3.0.1'
    }

    task shrinkDependencies(type: ProGuardTask, dependsOn: shadowJar) {
        delegate.ext.archivePath = postfixedJar(jar.archivePath, 'proguard')

        injars shadowJar.archivePath
        outjars archivePath

        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
        libraryjars configurations.compile
        libraryjars configurations.proguard

        dontoptimize
        dontobfuscate
        dontwarn '**.com.google.j2objc.annotations.**'
        dontwarn 'org.codehaus.**'
        dontwarn 'org.slf4j.impl.**'

        keep "class !${guavaRelocationPackage}.** {*;}"

        file("$rootProject.projectDir/proguard-keepclassmembers.txt").eachLine(UTF_8.name()) {
            keepclassmembers "class ${thirdPartyRelocationPackage}.**${it}** {*;}"
        }
    }
    assemble.dependsOn(shrinkDependencies)

    task finishArchive {
        doLast {
            assert jar.archivePath.delete()
            Files.copy(shrinkDependencies.archivePath.toPath(), jar.archivePath.toPath())
        }
        mustRunAfter jar
    }
    build.dependsOn(finishArchive)
}

def configurePublish = {
    uploadArchives {
        repositories {
            mavenDeployer {
                // the following properties can be defined in ~/.gradle/gradle.properties:
                if (project.hasProperty('tngNexusUsername') && project.hasProperty('tngNexusPassword')) {
                    repository(url: 'https://nexus.int.tngtech.com/content/repositories/releases') {
                        authentication(userName: tngNexusUsername, password: tngNexusPassword)
                    }
                    snapshotRepository(url: 'https://nexus.int.tngtech.com/content/repositories/snapshots') {
                        authentication(userName: tngNexusUsername, password: tngNexusPassword)
                    }
                }
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    // NOTE: If I write @see ..., I don't want to fail my build because of a missing @param :-(
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

productionProjects*.with {
    apply plugin: 'com.github.johnrengelman.shadow'

    delegate.with configureFindbugs
    delegate.with configureShadow
    delegate.with configureProGuard
    delegate.with configurePublish

    test {
        if (!it.hasProperty('allTests')) {
            it.useJUnit {
                excludeCategories 'com.tngtech.archunit.Slow'
            }
        }
    }
}

apply from: 'build-utils/build-utils.gradle'